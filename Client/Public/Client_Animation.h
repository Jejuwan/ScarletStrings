#pragma once

namespace ANIMATION
{
#pragma region PLAYABLE CHARACTER
	enum class PLAYER
	{
		//BUG,
		BRAINCRUSH_100,
		BRAINCRUSH_200,
		BRAINCRUSH_400,
		BRAINCRUSH_600,
		BRAINCRUSH_700,
		BRAINCRUSH_800,
		BRAINCRUSH_900,
		BRAINCRUSH_COMMON,
		BRAINFIELD1,
		BRAINFIELD2,
		IDLE,
		RUN_START_F,
		RUN_START_L,
		RUN_START_R,
		RUN_START_BL, 
		RUN_START_BR,
		RUN,
		RUN_TURN,
		RUN_END,
		DASH,
		DASH_TURN,
		DASH_STOP,
		JUMP_FALL,
		JUMP_LANDING,
		JUMP_RISE,
		JUMP_START, 
		DASH_JUMP_FALL,
		DASH_JUMP_LANDING,
		DASH_JUMP_RISE,
		DASH_JUMP_START,
		DOUBLE_JUMP_RISE,
		RUN_JUMP_FALL,
		RUN_JUMP_LANDING,
		RUN_JUMP_RISE,
		RUN_JUMP_START,
		DODGE_F_START,
		DODGE_F_STOP, 
		DODGE_R_START,
		DODGE_R_STOP,
		DODGE_B_START,
		DODGE_B_STOP,
		DODGE_L_START,
		DODGE_L_STOP,
		AIR_DODGE_F,
		AIR_DODGE_R,
		AIR_DODGE_B,
		AIR_DODGE_L,
		USEITEM,
		ATK1,
		ATK2,
		ATK3,
		ATK4,
		ATK_UPPER,
		ATK_UPPER_FALL,
		ATK_UPPER_LANDING,
		ATK_UPPER_START,
		ATK_JUSTDODGE_ATTACK,
		ATK_BACKSTEP,
		ATK_BACKSTEP_ELECTRIC,
		ATK_CHARGE_CANCEL,
		ATK_NORMAL_CHARGE_CANCEL,
		ATK_NORMAL_CHARGE_LOOP,
		ATK_NORMAL_CHARGE_START,
		ATK_CHARGE_LOOP,
		ATK_CHARGE_START,
		ATK_CHARGE,
		ATK_CHARGE_ATK_END,
		ATK_CHARGE_ATK_START,
		ATK_DASH_END,
		ATK_DASH_START,
		ATK_DASH2_END,
		ATK_DASH2_START,
		ATK_DASH3_END,
		ATK_DASH3_START,
		ATK_AIR1,
		ATK_AIR1_WP,
		ATK_AIR2,
		ATK_AIR2_WP,
		ATK_AIR3,
		ATK_AIR3_WP,
		ATK_AIR3_WP_ELECTRIC,
		ATK_AIR_JUSTDODGE_FALL,
		ATK_AIR_JUSTDODGE_LANDING,
		ATK_AIR_JUSTDODGE,
		ATK_AIR_HOLD_END,
		ATK_AIR_HOLD_START,
		ATK_AIR_DASH_END,
		ATK_AIR_DASH_START,
		CAPTURE_BACKSTEP,
		THROW_FORWARD,
		THROW_STRONG_SECOND,
		CAPTURE_AIR_END,
		CAPTURE_AIR_LOOP,
		CAPTURE_AIR_START,
		CAPTURE_END,
		CAPTURE_LOOP,
		CAPUTRE_START,
		THROW_END,
		THROW_LOOP,
		THROW_START,
		THROW_AIR_CANCEL,
		THROW_AIR_LOOP,
		THROW_AIR_START,
		CAPTURE_BACKSTEP_END,
		CAPTURE_BACKSTEP_LOOP,
		CAPTURE_BACKSTEP_START,
		THROW_CROSS,
		THROW_ROTATION_CANCEL,
		THROW_ROTATION_END,
		THROW_ROTATION_LOOP,
		THROW_ROTATION_START,
		BUS_ATTACK,
		BUS_END,
		BUS_LOOP,
		BUS_MOVE_F,
		BUS_MOVE_L,
		BUS_MOVE_R,
		BUS_START,
		BUS_RIDE_CANCEL,
		BUS_RIDE_END,
		BUS_RIDE_JUMP,
		BUS_RIDE_LOOP,
		THROW_LAUNCH,
		THROW_BIG_END,
		THROW_BIG_LOOP,
		THROW_BIG_START,
		DAMAGE_F,
		DAMAGE_FL,
		DAMAGE_FR,
		DAMAGE_B,
		DAMAGE_AIR,
		DAMAGE_F_L,
		DAMAGE_B_L,
		DAMAGE_L,
		DAMAGE_R,
		DOWN_START,
		BLOW_LANDING,
		DOWN_F,
		WAKE_UP_F,
		BREAKFALL_F,
		DOWN_B,
		WAKEUP_B,
		RISE_START,
		FALL_START,
		SWING_A1,
		SWING_A2,
		SWING_A3,
		SWING_DASH,
		SWING_AIR_LANDING,
		SWING_AIR_LOOP,
		SWING_AIR_START,
		SWING_THROW_B1,
		SWING_THROW1_WAIT,
		SWING_THROW2_WAIT,
		SWING_THROW1_MOVE,
		SWING_THROW2_MOVE,
		SWING_THROW1_AIR,
		SWING_THROW2_AIR,
		SWING_FALL_C1_START,
		SWING_FALL_C1_LOOP,
		SWING_FALL_C1_END,
		SWING_FALL_C1_CANCEL,
		FALL_FIN_START,
		FALL_FIN_LOOP,
		FALL_FIN_END,
		FALL_FIN_CANCEL,
		SWING_FALL_START,
		SWING_FALL_LOOP,
		SWING_FALL_END,
		SWING_FALL_CANCEL,
		SWING_FALL_AIR_LANDING,
		BRAINCRUSH_OPEN,
		BRAINFIELD_CLOSE_BF,
		BRAINFIELD_CLOS_NF,
		BRAINFIELD_START,
		BRAINFIELD_TRANS,
		DRIVE_OPEN,
		DRIVE_WAVE,
		MAX
	};

	enum class TENTACLE
	{
		START_L,
		START_R,
		START_M,
		START_LD,
		START_RD,
		COMMON
	};

	enum class BRAINFIELD_TENTACLE
	{
		BRAIN_FIELD_OPEN_C01_01 = 3,
		BRAIN_FIELD_OPEN_C01_02,
		BRAIN_FIELD_OPEN_C01_03,
		BRAIN_FIELD_OPEN_C02_01 = 9,
		BRAIN_FIELD_OPEN_C02_02,
		BRAIN_FIELD_OPEN_C02_03,
	};

#pragma endregion
#pragma region MONSTER
	enum class DISPEN_PERRY
	{
		WAIT1,						//00	2.f
		WAIT2,						//01	2.f
	//	WAIT3,						//
		WALK_F_START,				//02	2.f
		WALK_F_ROOP,				//03	2.f
		WALK_B_START,				//04	2.f
		WALK_B_ROOP,				//05	2.f
		WALK_L_START,				//06	2.f
		WALK_L_ROOP,				//07	2.f
		WALK_R_START,				//08	2.f
		WALK_R_ROOP,				//09	2.f
		RUN_F_START,				//10	2.f
		RUN_F_ROOP,					//11	2.f
		RUN_L_END,					//12	2.f
		RUN_R_END,					//13	2.f
		DODGE_B_START,				//14	2.f
		DODGE_B_STOP,				//15	2.f
		RUN_B_START,				//16	2.f
		RUN_B_ROOP,					//17	2.f
		WEAK_IN,					//18	2.f
		TURN_UP_LANDING,			//19
	//	TURN_UP_START,				//
	//	TURN_UP_LANDING,			//
		TURN_L_START,				//20	2.f
		TURN_L_ROOP,				//21	2.f
		TURN_R_START,				//22	2.f
		TURN_R_ROOP,				//23	2.f
		THREAT,						//24	2.f
		ATK_FRONTARM_L,				//25	2.f
		ATK_FRONTARM_R,				//26	2.f
		ATK_LEAP_START,				//27	2.f
		ATK_LEAP_LAND,				//28	2.f
		ATK_LEAP_LANDLOOP,			//29	2.f
		ATK_LEAP_END,				//30	2.f
		ATK_LEAP_JITABATA,			//31	2.f
	//	ATK_A4_START,				//00	
	//	ATK_A4_L_LOOP,				//00	
	//	ATK_A4_R_LOOP,				//00	
	//	ATK_A4_ROOP,				//00	
	//	ATK_A4_END,					//00	
	//	ATK_A5_START,				//00	
	//	ATK_A5_END,					//00	
	//	ATK_A6,						//00	
		ATK_A3_LEAP_START_C,		//32	2.f
	//	ATK_A4_START_C,				//00	
	//	ATK_A4_ROOP_C,				//00	
	//	ATK_A4_END_C,				//00	
	//	ATK_A5_START_C,				//00	
	//	ATK_A5_END_C,				//00	
		DAMAGE_F,					//33	2.f
		DAMAGE_B,					//34	2.f
		DAMAGE_L,					//35	2.f
		DAMAGE_R,					//36	2.f
		DAMAGE_WEAK,				//37	2.f
		DAMAGE_WEAKBREAK,			//38	2.f
		DAMAGE_KNOCKBACK_F,			//39	2.f
		DAMAGE_KNOCKBACK_B,			//40	2.f
		DAMAGE_KNOCKBACK_L,			//41	2.f
		DAMAGE_KNOCKBACK_R,			//42	2.f
		DOWN_START,					//43	2.f
		DOWN,						//44	2.f
		GETUP,						//45	2.f
	//	WEAKBREAK_FALLSTART_C,		//
	//	WEAKBREAK_FALL_LANDING_C,	//
		DAMAGE_UP_ADD,				//46	2.f
		DAMAGE_DOWN_ADD,			//47	2.f
		DOWN_SHOCK,					//48	2.f
		BCCHANCE_START,				//49	2.f
		BCCHANGE_LOOP,				//50	2.f
		BCCHANGE_END,				//51	2.f
	//	WAVE_S,						//
	//	WAVE_M,						//
	//	WAVE_L,						//
	//	WIP_RUN_F_ROOP,				//
		ATK_SPIN,					//52	2.f
		ATK_WATERBALL,				//53	2.f
		MAX
	};
	enum class FLOWER_CHEST {
		FINISH,
		IDLE,
		WALK,
		WALK_SHORT,
		RUN,
		RUN_SHORT,
		DODGE_BACK,
		DODGE_LEFT,
		DODGE_RIGHT,
		THREAT,
		ATTACK1,
		ATTACK2,
		DAMAGE_FRONT,
		DAMAGE_BACK,
		DAMAGE_AIR,
		DAMAGE_PSY_FRONT,
		DAMAGE_PSY_BACK,
		DAMAGE_PSY_LEFT,
		DAMAGE_PSY_RIGHT,
		DEAD_DOWN,
		DOWN_START,
		DOWN,
		GET_UP,
		DAMAGE_DOWN_ADD,//다운상태로 데미지 입으면 추가되는 꿈틀이 애니메이션인듯, 근데 어케하지?
		FALLING_START_FRONT,
		FALLING_END_FRONT,	
		FALLING_START_BACK,
		DAMAGE_FALLING_ADD,//떨어지는 상태로 데미지 입으면 추가되는 꿈틀이 애니메이션
		AIRBONE,
		FALLING,
		DOWN_SHOCK,//뭐지 이게 다운상태 데미지인거같은데
		BC_CHANCE_START, //BC찬스가 그 마무리 일격인가봄
		BC_CHANCE_LOOP,
		BC_CHANCE_END,
		PRESS_DOWN_START,//아마 무거운 물체로 찍어누르기인듯
		ATTACK_B1,//뭔지 모르겠음
		ATTACK_B2,//뭔지 모르겠음

		ANIMATION_END
	};

	enum class FLOWER_HEAD {
		FINISH,
		IDLE1,
		IDLE2,
		WALK_FRONT1,
		WALK_FRONT2,
		RUN,
		DODGE_BACK_START,
		DODGE_BACK_STOP,
		DODGE_LEFT_START,
		DODGE_LEFT_STOP,
		DODGE_RIGHT_START,
		DODGE_RIGHT_STOP,
		THREAT,
		ATTACK2,
		ATTACK3,
		ATTACK4_START,
		ATTACK4_LANDING,
		DAMAGE_FRONT,
		DAMAGE_BACK,
		DAMAGE_AIR,
		DAMAGE_PSY_FRONT,
		DAMAGE_PSY_BACK,
		DAMAGE_PSY_LEFT,
		DAMAGE_PSY_RIGHT,
		DEAD_DOWN,
		DOWN_START,
		DOWN,
		GETUP,
		DAMAGE_DOWN_ADD,
		BLOW_START_FRONT,
		BLOW_LANDING_FRONT,
		DAMAGE_ADD,
		RISE_START,
		FALL_START,
		DOWN_SHOCK,
		BC_CHANCE_START, //BC찬스가 그 마무리 일격인가봄
		BC_CHANCE_LOOP,
		BC_CHANCE_END,
		PRESS_DOWN_START,
		HIDE,
		SHOOT1,
		SOMERSAULT,
		SPIN,
		IDLE3,
		TO_GUARD,
		GUARD,
		TO_IDLE3,
		SHOOT2_START,
		SHOOT2,
		SHOT2_END,
		COUNTER,
		ANIMATION_END
	}; 

	enum class FLY {
		FINISH,
		T_POSE,
		FLY_BASEPOSE,
		IDLE,
		IDLE2,// 근데 왜 발라당이냐?
		LANDING,
		TAKEOFF,
		WALK,//근데 방향성이 없다
		FLY_IDLE,
		FLY_FORWARD,
		FLY_FORWARD2, //위에꺼랑 똑같음
		FLY_BACKWARD,
		FLY_LEFT,
		FLY_RIGHT,
		FLY_ESCAPE, //도주기
		FLY_RANDOM_L,
		FLY_RANDOM_R,
		WEAKOUT,	//몰루 안움직임
		//NONAME,	//몰루 안움직임 이건 심지어 이름도 없음	//야발 알고보니 어심프로 추출조차 안됨
		WEAKIN,	//몰루 안움직임
		THREAT,
		ATTACK1,
		ATTACK1_LOOP,
		ATTACK1_END,
		ATTACK2,	//뭔갈 집어던지는것같은데..?
		DAMAGE_FRONT,
		DAMAGE_BACK,
		DAMAGE_AIR,
		DAMAGE_PSY_FRONT,
		DAMAGE_PSY_BACK,
		DAMAGE_PSY_LEFT,
		DAMAGE_PSY_RIGHT,
		DEAD_DOWN,
		DOWN_START,
		DOWN,
		GETUP,
		DAMAGE_DOWN_ADD,
		BLOW_START_FRONT,
		BLOW_LANDING_FRONT,
		BLOW_START_BACK,
		DAMAGE_ADD,
		RISE_START,
		FALL_START,
		DAMAGE_PSHCO_FRONT2,
		DAMAGE_PSHCO_BACK2,
		DEAD_DOWN2,
		DOWN_START2,
		DOWN_SHOCK,
		BC_CHANCE1,
		BC_CHANCE2,
		BC_CHANCE_LOOP,
		BC_CHANCE_END,
		DAMAGE_ADD2,
		FALLING_START1,
		FALLING_START2,
		IDLE3,
		TAKEOFF_START,
		TAKEOFF_END,
		WALK_FRONT,
		WALK_BACK,
		WALK_LEFT,
		WALK_RIGHT,
		ATTACK_BODYSLAM_START,
		ATTACK_BODYSLAM_LOOP,
		ATTACK_BODYSLAM_END,
		ATTACK_3,
		TAKEOFF_OUT,
		ANIMATION_END
	};

	enum class SNAIL {
		FINISH,
		IDLE1,
		IDLE2,
		WALK_FRONT,
		WALK_BACKWARD,
		WALK_RIGHT,
		WALK_LEFT,
		THREAT,
		OIL_WALK_START,
		OIL_WALK_LOOP,
		SHOOT, //총알발사
		DAMAGE_FRONT,
		DAMAGE_BACK,
		DAMAGE_AIR,
		DAMAGE_PSY_FRONT,
		DAMAGE_PSY_BACK,
		DAMAGE_PSY_RIGHT,
		DAMAGE_PSY_LEFT,
		DEAD_DOWN,
		DOWN_START,
		DOWN,
		GETUP,
		DOWN_ADD,
		BLOW_ATTACK_FRONT,
		BLOW_LANDING_FRONT,
		DAMAGE_ADD,
		RISE_START,
		FALL_START,
		DOWN_SHOCK,
		BC_CHANCE_START,
		BC_CHANCE_LOOP,
		BC_CHANCE_END,
		PRESS_DOWN_START,
		AVATAR_R,
		AVATAR_L,
		RUN,

		ANIMATION_END
	};

	enum class BUFFALO {
		FINISH,
		TWO_FOOT_IDLE1,
		TWO_FOOT_IDLE2,
		TRANSFORM_DOWN, //앞발->네발
		TWO_FOOT_WALK_FRONT,
		TWO_FOOT_RUN,
		TWO_FOOT_WALK_BACK,
		TWO_FOOT_THREAT,
		IDLE1,
		TRANSFORM_UP,
		WALK_FRONT,
		RUN,
		WALK_BACK,
		THREAT,
		ATTACK1_SWING_R,
		ATTACK1_SWING_R_OMEN,
		ATTACK2_SWING_L,
		ATTACK3_STUMP,
		ATTACK3_STUMP_END,
		ATTACK3_STUMP_LOOP,
		ATTACK_BACKFOOT_L,
		ATTACK_BACKFOOT_R,
		ATTACK_RUSH_START,
		ATTACK_RUSH_LOOP,
		ATTACK_RUSH_STOP_RETURN,
		TWO_FOOT_DAMAGE_FRONT,
		TWO_FOOT_DAMAGE_BACK,
		TWO_FOOT_DAMAGE_AIR,
		TWO_FOOT_DAMAGE_PSY_FRONT,
		TWO_FOOT_DAMAGE_PSY_BACK,
		TWO_FOOT_DAMAGE_PSY_LEFT,
		TWO_FOOT_DAMAGE_PSY_RIGHT,
		TWO_FOOT_DEAD_DOWN,
		TWO_FOOT_DOWN_START,
		DOWN,
		DAMAGE_DOWN_ADD,
		DAMAGE_ADD,
		DAMAGE_FRONT,
		DAMAGE_BACK,
		LAUNCH_START,
		DAMAGE_PSY_FRONT,
		DAMAGE_PSY_BACK,
		DAMAGE_PSY_LEFT,
		DAMAGE_PSY_RIGHT,
		DEAD_DOWN,
		DOWN_START,
		GETUP,
		DOWN_SHOCK,
		BLOW_START_FRONT,
		BLOW_LANDING_FRONT,
		TWO_FOOT_BC_CHANCE_START,
		BC_CHANCE_LOOP,
		BC_CHANCE_END,
		DAMAGE_ADD2,
		PRESS_DOWN_START1,
		PRESS_DOWN_START2,
		ATTACK_RUSH2_START,
		ATTACK_RUSH2_LOOP,
		ATTACK_RUSH2_END,
		ATTACK_B_BOYING,
		FLOWER,
		SHOUT_START,
		SHOUT_START_SAME,
		SHOUT_LOOP,
		SHOUT_END,
		 
		ANIMATION_END
	};

	enum class TUTOBOSS {
		FINISH,
		IDLE1,
		IDLE2,
		WALK_FRONT,
		WALK_FRONT_LOOP,
		RUN_START,
		RUN_LOOP,
		WALK_BACK,
		WALK_BACK_LOOP,
		WALK_LEFT,
		WALK_LEFT_LOOP,
		WALK_RIGHT,
		WALK_RIGHT_LOOP,
		DIVE_IN,
		DIVE_OUT,
		TURN_RIGHT,
		TURN_LEFT,
		THREAT,
		ATTACK_BREATH_START,
		ATTACK_BREATH_LOOP,
		ATTACK_BREATH_END,
		ATTACK_LASER_START,
		ATTACK_LASER_LOOP,
		ATTACK_LASER_END,
		ATTACK_ROLLING,
		ATTACK_ROLLING2,
		ATTACK_LASER2_START,
		ATTACK_LASER2_LOOP,
		ATTACK_LASER2_END,
		ATTACK_BURSTOUT_START,
		ATTACK_BURSTOUT_LOOP,
		ATTACK_BURSTOUT_END,
		DAMAGE_FRONT,
		DAMAGE_BACK,
		DAMAGE_PSY_FRONT,
		DAMAGE_PSY_BACK,
		DAMAGE_PSY_LEFT,
		DAMAGE_PSY_RIGHT,
		DASH_DOWN,
		DEAD_DOWN,
		DOWN_START,
		DOWN,
		GETUP,
		DAMAGE_DOWN_ADD,
		DAMAGE_LASER_ADD,
		BLOW_START,
		BLOW_LANDING,
		DAMAGE_ADD2,
		DOWN_SHOCK,
		BC_CHANCE_START,
		BC_CHANCE_LOOP,
		BC_CHANVE_END,
		PRESS_DOWN_START,
		ATTACK_BITE,
		ATTACK_BREATH2_START,
		ATTACK_BREATH2_END,
		ATTACK_BREATH2_LOOP,
		ATTACK_BREATH2_STOP,
		AVATAR_R,
		AVATAR_L,
		DASH_START,
		DASH_LOOP,
		DASH_END,

		ANIMATION_END
	};

	enum class TWINCE {
		FINISH,
		IDLE,
		WALK_FRONT,
		WALK_FRONT_LOOP,
		WALK_BACK,
		WALK_BACK_LOOP,
		WALK_LEFT,
		WALK_LEFT_LOOP,
		WALK_RIGHT,
		WALK_RIGHT_LOOP,
		RUN_FRONT,
		RUN_FRONT_LOOP,
		RUN_BACK,
		RUN_BACK_LOOP,
		RUN_LEFT,
		RUN_LEFT_LOOP,
		RUN_RIGHT,
		RUN_RIGHT_LOOP,
		WAISTARMOR_ON,
		THREAT,
		ATTACK_A2_FEINT,
		ATTACK_A5_4ATTACK,
		ATTACK_A7,
		ATTACK_A1_OMENSSTART,
		ATTACK_A1_OMENLOOP,
		ATTACK_A1_START,
		ATTACK_A1_LOOP,
		ATTACK_A1_END,
		DAMAGE_FRONT,
		DAMAGE_BACK,
		DAMAGE_AIR,
		DAMAGE_PSY_FRONT,
		DAMAGE_PSY_BACK,
		DAMAGE_PSY_LEFT,
		DAMAGE_PSY_RIGHT,
		DEAD_DOWN,
		DOWN_START,
		DOWN,
		GETUP,
		DAMAGE_DOWN_ADD,
		BLOW_START,
		BLOW_LANDING,
		BLOW_START_BACK,
		DAMAGE_ADD,
		LAUNCH_START,
		DOWN_SHOCK,
		BCCHANCE_START,
		BCCHANCE_LOOP,
		BCCHANCE_END,
		PRESS_DOWN_START,
		IDLE2,
		WARP_START,
		WARP_END,
		IDLE3,
		EXPLOSION,
		THREAT2,
		ATTACK_A4_END2,
		ATTACK_A10_START_RIGHT2,
		ATTACK_A10_START_LEFT2,
		ATTACK_A10_SWING_RL,
		ATTACK_A10_SWING_LR,
		ATTACK_A10_END_R,
		ATTACK_A10_END_L,
		ATTACK_A11_START,
		ATTACK_A11_LOOP,
		ATTACK_A11_END,

		ANIMATION_END
	};

	enum class STATUE {
		CUTSCENE_INITIAL_0,
		CUTSCENE_INITIAL_1,
		CUTSCENE_INITIAL_2,
		CUTSCENE_INITIAL_3,
		CUTSCENE_POSITIONING_0,
		CUTSCENE_POSITIONING_1,
		CUTSCENE_POSITIONING_2,
		CUTSCENE_POSITIONING_3,
		CUTSCENE_IDLE,
		IDLE0,
		IDLE1,
		IDLE2,
		IDLE_FLOWER0,
		IDLE_FLOWER1,
		IDLE_FLOWER2,
		ATTACK0,
		ATTACK1,
		ATTACK2,
		ATTACK_OBJ_OMEN_START,
		ATTACK_OBJ_OMEN0,
		ATTACK_OBJ_OMEN1,
		ATTACK_OBJ_OMEN2,
		DOWN_START0,
		DOWN_START1,
		DOWN_START2,
		DOWN0,
		DOWN1,
		DOWN2,
		GETUP0,
		GETUP1,
		GETUP2,
		DOWN_SP_START0,
		DOWN_SP_START1,
		DOWN_SP_START2,
		DOWN_SP0,
		DOWN_SP1,
		DOWN_SP2,
		DOWN_SP_END0,
		DOWN_SP_END1,
		DOWN_SP_END2,
		CHANCE_END,
		CHANCE_WAIT,
		CHANCE_START,
		DAMAGE_WAIT0_ADD0,
		DAMAGE_WAIT1_ADD1,
		DAMAGE_WAIT2_ADD2,
		CHANCE_START1,
		CHANCE_LOOP1,
		CHANCE_END1,
		ANIMATION_END
	};

	enum class KAREN {
		BC_START,
		BC_END,
		IDLE1,
		IDLE2,//CROSSED ARM
		TRANS_BATTLE,
		BREAKDASH,
		JUMP_FALL,
		BATTLE_IDLE1,
		BATTLE_IDLE1_ARRIVAL,
		BATTLE_IDLE2,
		TRANS_NATURAL,
		WALK,
		RUN,
		DASH,
		DASH_L,
		DASH_R,
		BREAK_DASH,
		JUMP_FALL2,
		JUMP_LANDING,
		JUMP_START,
		JUMP_RISE,
		DODGE_F_START,
		DODGE_F_STOP,
		DODGE_B_STOP,
		DODGE_R_STOP,
		DODGE_L_STOP,
		DODGE_JUST,
		DODGE_JUST_COPY,
		ATTACK_KICK_A1,//KNEEKICK
		ATTACK_KICK_A2,//SIDEKICK
		ATTACK_KICK_A3,//ROUNDKICK
		PSYCO_THROW_END,
		PSYCO_THROW_LOOP,
		PSYCO_THROW_START,
		ATTACK_KICK_A4,//JUMP  ROUNDKICK
		ATTACK_AIR_CHARGE_START, //JUNGI GIGIGIK
		ATTACK_AIR_CHARGE_LOOP, //JUNGI GIGIGIK
		ATTACK_AIR_START, //JUNGI GIGIGIK
		ATTACK_AIR_LOOP, //JUNGI GIGIGIK
		ATTACK_AIR_FALL, //JUNGI GIGIGIK
		ATTACK_AIR_LANDING, //JUNGI GIGIGIK
		ATTACK_AIR_LANDING_LOOP, //JUNGI GIGIGIK
		ATTACK_AIR_LANDING_END, //JUNGI GIGIGIK
		ATTACK_COPY_START,
		ATTACK_COPY_LOOP,
		ATTACK_CROUCH_START,
		ATTACK_CROUCH_LOOP,
		ATTACK_RUSH_START,
		ATTACK_RUSH_LOOP,
		ATTACK_RUSH_END,
		ATTACK_FIRE_CHARGE_START,
		ATTACK_FIRE_CHARGE_LOOP,
		ATTACK_FIRE_START,
		ATTACK_FIRE_LOOP,
		ATTACK_FIRE_END,
		ATTACK_CHASE_CHARGE,
		ATTACK_CHASE_LOOP,
		ATTACK_CHASE_STARTL,
		ATTACK_CHASE_LOOP_L,
		ATTACK_CHASE_STARTR,
		ATTACK_CHASE_LOOPR,
		ATTACK_SEETHROUGH,
		ATTACK_COUNTER_START,
		ATTACK_COUNTER_LOOP,
		ATTACK_COUNTER_END,
		ATTACK_CAPTURE_END,
		ATTACK_THROW_WAIT,
		ATTACK_PSYCOUNTER,
		DAMAGE_I_FL,
		DAMAGE_I_FR,
		DAMAGE_I_B,
		DAMAGE_AIR,
		DAMAGE_H_F,
		DAMAGE_H_B,
		DAMAGE_H_L,
		DAMAGE_H_R,
		DOWN_START_SHORT,
		DOWN_START,
		DOWN_SP_END,
		BLOW_LANDING_F,
		DOWN_F,
		WAKEUP_F,
		BLOW_RISE_B,
		BLOW_FALL_B,
		BLOW_LANDING_B,
		DOWN_B,
		WAKEUP_B,
		RISE_START,
		FALL_START,
		DOWN_F_SHOCK,
		DOWN_B_SHOCK,
		DAMAGE_ADD,
		DAMAGE_DOWN_F_ADD,
		DAMAGE_DOWN_B_ADD,
		FACE_DEFAULT_M,
		FACE_SMILE_M,
		FACE_SMILE2_M,
		FACE_SMILE2_M_FP,
		FACE_ANGRY_M,
		FACE_ANGRY_M_FP,
		FACE_ANGRY2_M,
		FACE_ANGRY2_M_FP,
		FACE_AVERSION_M,
		FACE_AVERSION_M_FP,
		FACE_DAMAGE_M,
		FACE_DAMAGE_M_FP,
		FACE_SERIOUS_M,
		FACE_SERIOUS_M_FP,
		POSE001,
		POSE002,
		POSE003,
		POSE004,
		POSE005,
		POSE001_,
		ANIMATION_END
	};

#pragma endregion

#pragma region Cutscene Character 
	enum class KYOKA
	{
		WAIT_01,
		WAIT_02,
		WALK,
		WAIT_SIT,
		TALK_02,
		JOY_00,
		JOY_01,
		JOY_02,
		FC_DEFAULT,
		FC_DEFAULT_M,
		FC_SMILE,
		FC_SMILE_M,
		FC_SMILE_M_001,
		FC_SMILE_2,
		FC_SMILE_2_M,
		FC_ANGRY,
		FC_ANGRY_M,
		FC_SAD,
		FC_SAD_M,
		FC_SURPRISE,
		FC_SURPRISE_M,
		FC_AVERSION,
		FC_AVERSION_M,
		FC_SERIOUS,
		FC_SERIOUS_M,
		FC_CHEEK,
		SAS,
		MAX,
	};
	enum class NAOMI
	{
		WAIT_01,
		WAIT_02,
		WALK,
		TALK_02,
		FC_DEFAULT_M,
		FC_SMILE_M,
		FC_SMILE2_M,
		FC_ANGRY_M,
		FC_ANGRY2_m,
		FC_SAD_M,
		FC_DAMAGE_M,
		FC_BLUSHING_M,
		MAX,
	};
	enum class KASANE_CUTSCENE
	{
		WAIT_01,
		WAIT_02,
		WALK,
		WALK_END,
		FC_DEFAULT,
		FC_DEFAULT_M,
		FC_SMILE,
		FC_SMILE_M,
		FC_ANGRY,
		FC_ANGRY_M,
		FC_SAD,
		FC_SAD_M,
		FC_SURPRISE,
		FC_SURPRISE_M,
		FC_FEAR,
		FC_FEAR_M,
		FC_AVERSION,
		FC_AVERSION_M,
		FC_DAMAGE,
		FC_DAMAGE_M,
		FC_DEAD,
		FC_SERIOUS,
		FC_SERIOUS_M,
		FC_BLUSHING,
		FC_BLUSHING_M,
		FC_EX_01,
		FC_EX_01_M,
		MAX
	};
	enum class HARUKA
	{
		TALK_02,
		FC_DEFAULT_M,
		FC_SMILE_M,
		FC_SMILE2_M,
		FC_ANGRY_M,
		FC_SAD_M,
		FC_SURPRISE_M,
		FC_SURPRISE2_M,
		FC_AVERSION_M,
		FC_SERIOUS_M,
		FC_EX02_M,
		FC_EX03_M,
		MAX,
	};
	enum class SHIDEN
	{
		WAIT_01,
		WAIT_02,
		WALK,
		TALK_02,
		FC_DEFAULT,
		FC_DEFAULT_M,
		FC_ANGRY,
		FC_ANGRY_M,
		FC_SERIOUS,
		FC_SERIOUS_M,
		SAS,
		MAX,
	};
	enum class ARASHI
	{
		SAS,
		WAIT_01,
		WAIT_02,
		WALK,
		RUN,
		JUMP_FAIL,
		JUMP_LANDING,
		JUMP_START,
		JUMP_RISE,
		TALK_02,
		FC_DEFAULT,
		FC_DEFAULT_M,
		FC_DEFAULT2,
		FC_DEFAULT2_M,
		FC_SMILE,
		FC_SMILE_M,
		FC_SMILE2,
		FC_SMILE2_M,
		FC_SMILE3,
		FC_SMILE3_M,
		FC_ANGRY,
		FC_ANGRY_M,
		FC_SAD,
		FC_SAD_M,
		FC_SURPRISE,
		FC_SURPRISE_M,
		FC_SURPRISE2,
		FC_SURPRISE2_M,
		FC_AVERSION,
		FC_AVERSION_M,
		FC_SERIOUS,
		FC_SERIOUS_M,
		FC_EX01,
		FC_EX01_M,
		MAX,
	};
	enum class GEMMA
	{
		WAIT_01,
		WAIT_02,
		MAX,
	};

	enum class KAGERO
	{
		WAIT02,
		WALK,
		SAS,
		MAX,
	};
#pragma endregion

#pragma region Teammate
	enum class ARASHI_TEAMMATE
	{
		AL_WAIT01,
		AL_WAIT02,
		UP_TRANS_BATTLE,
		AL_WALK,
		AL_RUN,
		AL_DASH,
		AL_DASH_L,
		AL_DASH_R,
		AL_BRAKE_DASH,
		AL_JUMP_FALL,
		AL_JUMP_LANDING,
		AL_JUMP_START,
		AL_JUMP_RISE,
		AL_DODGE_F_START,
		AL_DODGE_F_STOP,
		AL_DODGE_B_START,
		AL_DODGE_B_STOP,
		AL_DODGE_R_START,
		AL_DODGE_R_STOP,
		AL_DODGE_L_START,
		AL_DODGE_L_STOP,
		AL_WAIT01_BATTLE,
		AL_WAIT02_BATTLE,
		LO_TRANS_NEUTRAL,
		UP_TRANS_NEUTRAL,
		AL_WALK_BATTLE,
		AL_RUN_BATTLE,
		AL_DASH_BATTLE,
		AL_DASH_L_BATTLE,
		AL_DASH_R_BATTLE,
		AL_BRAKE_DASH_BATTLE,
		AL_JUMP_FALL_BATTLE,
		AL_JUMP_LANDING_BATTLE,
		AL_JUMP_START_BATTLE,
		AL_JUMP_RISE_BATTLE,
		AL_JUMP_SHIFT_FALL_BATTLE,
		AL_JUMP_SHIFT_LANDING_BATTLE,
		AL_JUMP_SHIFT_RISE_BATTLE,
		AL_DODGE_F_START_BATTLE,
		AL_DODGE_F_STOP_BATTLE,
		AL_DODGE_B_START_BATTLE,
		AL_DODGE_B_STOP_BATTLE,
		AL_DODGE_R_START_BATTLE,
		AL_DODGE_R_STOP_BATTLE,
		AL_DODGE_L_START_BATTLE,
		AL_DODGE_L_STOP_BATTLE,
		AL_ENPC_USEITEM,
		AL_USEITEM,
		AL_ATK_A1,
		AL_ATK_A2,
		AL_ATK_A3_F_DOWN_L,
		AL_ATK_A3_F_DOWN_R,
		AL_ATK_A3_F_SIDE,
		AL_ATK_A3_F_THRUST,
		AL_ATK_A3_L_DOWN,
		AL_ATK_A3_L_SIDE,
		AL_ATK_A3_L_UP,
		AL_ATK_A3_R_DOWN,
		AL_ATK_A3_R_SIDE,
		AL_ATK_A3_R_UP,
		AL_ENPC_A3_LOOP,
		AL_ENPC_A3_MOVE_START,
		AL_ENPC_A3_START,
		AL_ATK_A4_END,
		AL_ATK_A4_LOOP,
		AL_ATK_A4_START,
		AL_ATK_B1_END,
		AL_ATK_B1_LOOP,
		AL_ATK_B1_START,
		AL_ATK_B2,
		AL_ATK_F_START,
		AL_ENPC_DRIVE,
		AL_DAMAGE_L_F,
		AL_DAMAGE_L_FL,
		AL_DAMAGE_L_FR,
		AL_DAMAGE_L_B,
		AL_DAMAGE_AIR,
		AL_DOWN_START_SHORT,
		AL_DOWN_START,
		AL_DOWN_LOOP,
		AL_DOWN_END,
		AL_BLOW_LANDING_F,
		AL_DOWN_F,
		AL_WAKEUP_F,
		AL_DOWN_B,
		AL_WAKEUP_B,
		AL_RISE_START,
		AL_GUARD,
		AL_GUARD_AIR,
		AL_FALL_START,
		AL_ATK_SAS_POSE,
		AL_ATK_SAS_AIR_FALL,
		AL_ATK_SAS_MOVE,
		AL_ATK_SAS_START,
		AL_TURN180_L,
		AL_TURN180_R,
		AL_TURN90_L,
		AL_TURN90_R,
		AL_WAIT_SIT01,
		AL_HIDEAWAY01,
		AL_HIDEAWAY01_START,
		AL_HIDEAWAY02,
		AL_HIDEAWAY02_START,
		AL_HIDEAWAY03,
		AL_HIDEAWAY04,
		AL_HIDEAWAY04_CANCEL,
		AL_HIDEAWAY04_START,
		AL_HIDEAWAY05,
		AL_HIDEAWAY06,
		AL_HIDEAWAY07,
		AL_HIDEAWAY08,
		CV_ATK,
		MENU_WAITB,
		MENU_WAITBLOOP,
	};

	enum class SHIDEN_TEAMMATE
	{
		AL_WAIT01,
		AL_WAIT02,
		LO_TRANS_BATTLE,
		UP_TRANS_BATTLE,
		AL_WALK,
		AL_RUN,
		AL_DASH,
		AL_DASH_L,
		AL_DASH_R,
		AL_BRAKE_DASH,
		AL_JUMP_FALL,
		AL_JUMP_LANDING,
		AL_JUMP_START,
		AL_JUMP_RISE,
		AL_DODGE_F_START,
		AL_DODGE_F_STOP,
		AL_DODGE_B_START,
		AL_DODGE_B_STOP,
		AL_DODGE_R_START,
		AL_DODGE_R_STOP,
		AL_DODGE_L_START,
		AL_DODGE_L_STOP,
		AL_WAIT01_BATTLE,
		AL_WAIT02_BATTLE,
		LO_TRANS_NEUTRAL,
		UP_TRANS_NEUTRAL,
		AL_WALK_BATTLE,
		AL_RUN_BATTLE,
		AL_DASH_BATTLE,
		AL_DASH_L_BATTLE,
		AL_DASH_R_BATTLE,
		AL_BRAKE_DASH_BATTLE,
		AL_JUMP_FALL_BATTLE,
		AL_JUMP_LANDING_BATTLE,
		AL_JUMP_START_BATTLE,
		AL_JUMP_RISE_BATTLE,
		AL_JUMP_SHIFT_FALL,
		AL_JUMP_SHIFT_LANDING,
		AL_JUMP_SHIFT_RISE,
		AL_DODGE_F_START_BATTLE,
		AL_DODGE_F_STOP_BATTLE,
		AL_DODGE_B_START_BATTLE,
		AL_DODGE_B_STOP_BATTLE,
		AL_DODGE_R_START_BATTLE,
		AL_DODGE_R_STOP_BATTLE,
		AL_DODGE_L_START_BATTLE,
		AL_DODGE_L_STOP_BATTLE,
		AL_ENPC_USEITEM,
		AL_USEITEM,
		AL_ATK_A1,
		AL_ATK_A2,
		AL_ATK_A3,
		AL_ATK_B1,
		AL_ATK_C1,
		AL_ENPC_C1_LOOP,
		AL_ENPC_DRIVE,
		AL_DAMAGE_L_F,
		AL_DAMAGE_L_FL,
		AL_DAMAGE_L_FR,
		AL_DAMAGE_L_B,
		AL_DAMAGE_AIR,
		AL_DAMAGE_H_F,
		AL_DAMAGE_H_F_LONG,
		AL_DAMAGE_H_B,
		AL_DAMAGE_H_B_LONG,
		AL_DAMAGE_H_L,
		AL_DAMAGE_H_L_LONG,
		AL_DAMAGE_H_R,
		AL_DAMAGE_H_R_LONG,
		AL_DOWN_START_SHORT,
		AL_DOWN_START,
		AL_BLOW_LANDING_F,
		AL_DOWN_F,
		AL_WAKEUP_F,
		AL_DOWN_B,
		AL_WAKEUP_B,
		AL_RISE_START,
		AL_GUARD,
		AL_GUARD_AIR,
		AL_FALL_START,
		AL_DOWN_F_SHOCK,
		AL_DOWN_B_SHOCK,
		AL_ATK_SAS_POSE,
		AL_ATK_SAS_AIR_FALL,
		AL_ATK_SAS_AIR_LANDING,
		AL_ATK_SAS_START,
		CV1_ATK_START,
		CV2_ATK_LOOP,
		CV3_ATK_END,
	};
#pragma endregion
}
